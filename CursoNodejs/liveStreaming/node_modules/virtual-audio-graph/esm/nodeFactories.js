var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import StandardVirtualAudioNode from "./VirtualAudioNodes/StandardVirtualAudioNode";
var createNodeConstructor = function (nodeName) {
    return function (output) {
        var rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            rest[_i - 1] = arguments[_i];
        }
        if (nodeName === "mediaStreamDestination") {
            return new StandardVirtualAudioNode(nodeName);
        }
        if (output == null) {
            throw new Error("Output not specified for ".concat(nodeName));
        }
        return new (StandardVirtualAudioNode.bind.apply(StandardVirtualAudioNode, __spreadArray([void 0, nodeName, output], rest, false)))();
    };
};
export var analyser = createNodeConstructor("analyser");
export var biquadFilter = createNodeConstructor("biquadFilter");
export var bufferSource = createNodeConstructor("bufferSource");
export var channelMerger = createNodeConstructor("channelMerger");
export var channelSplitter = createNodeConstructor("channelSplitter");
export var convolver = createNodeConstructor("convolver");
export var delay = createNodeConstructor("delay");
export var dynamicsCompressor = createNodeConstructor("dynamicsCompressor");
export var gain = createNodeConstructor("gain");
export var mediaElementSource = createNodeConstructor("mediaElementSource");
export var mediaStreamDestination = createNodeConstructor("mediaStreamDestination");
export var mediaStreamSource = createNodeConstructor("mediaStreamSource");
export var oscillator = createNodeConstructor("oscillator");
export var panner = createNodeConstructor("panner");
export var stereoPanner = createNodeConstructor("stereoPanner");
export var waveShaper = createNodeConstructor("waveShaper");
